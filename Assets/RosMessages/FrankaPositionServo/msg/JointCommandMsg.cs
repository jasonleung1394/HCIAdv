//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.FrankaPositionServo
{
    [Serializable]
    public class JointCommandMsg : Message
    {
        public const string k_RosMessageName = "franka_position_servo/JointCommand";
        public override string RosMessageName => k_RosMessageName;

        public HeaderMsg header;
        public int mode;
        //  Mode in which to command arm
        public string[] names;
        //  Joint names order for command
        //  Fields of commands indexed according to the Joint names vector.
        //  Command fields required for a desired mode are listed in the comments
        public double[] position;
        //  (radians)       Required for POSITION_MODE and IMPEDANCE_MODE
        public double[] velocity;
        //  (radians/sec)   Required for VELOCITY_MODE and IMPEDANCE_MODE
        public double[] acceleration;
        //  (radians/sec^2) Required for                   
        public double[] effort;
        //  (newton-meters) Required for TORQUE_MODE
        //  Modes available to command arm
        public const int POSITION_MODE = 1;
        public const int VELOCITY_MODE = 2;
        public const int TORQUE_MODE = 3;
        public const int IMPEDANCE_MODE = 4;

        public JointCommandMsg()
        {
            this.header = new HeaderMsg();
            this.mode = 0;
            this.names = new string[0];
            this.position = new double[0];
            this.velocity = new double[0];
            this.acceleration = new double[0];
            this.effort = new double[0];
        }

        public JointCommandMsg(HeaderMsg header, int mode, string[] names, double[] position, double[] velocity, double[] acceleration, double[] effort)
        {
            this.header = header;
            this.mode = mode;
            this.names = names;
            this.position = position;
            this.velocity = velocity;
            this.acceleration = acceleration;
            this.effort = effort;
        }

        public static JointCommandMsg Deserialize(MessageDeserializer deserializer) => new JointCommandMsg(deserializer);

        private JointCommandMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.names, deserializer.ReadLength());
            deserializer.Read(out this.position, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.velocity, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.acceleration, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.effort, sizeof(double), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.mode);
            serializer.WriteLength(this.names);
            serializer.Write(this.names);
            serializer.WriteLength(this.position);
            serializer.Write(this.position);
            serializer.WriteLength(this.velocity);
            serializer.Write(this.velocity);
            serializer.WriteLength(this.acceleration);
            serializer.Write(this.acceleration);
            serializer.WriteLength(this.effort);
            serializer.Write(this.effort);
        }

        public override string ToString()
        {
            return "JointCommandMsg: " +
            "\nheader: " + header.ToString() +
            "\nmode: " + mode.ToString() +
            "\nnames: " + System.String.Join(", ", names.ToList()) +
            "\nposition: " + System.String.Join(", ", position.ToList()) +
            "\nvelocity: " + System.String.Join(", ", velocity.ToList()) +
            "\nacceleration: " + System.String.Join(", ", acceleration.ToList()) +
            "\neffort: " + System.String.Join(", ", effort.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
