//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Control
{
    [Serializable]
    public class AdmittanceControllerStateMsg : Message
    {
        public const string k_RosMessageName = "control_msgs/AdmittanceControllerState";
        public override string RosMessageName => k_RosMessageName;

        //  Admittance parameters
        public Std.Float64MultiArrayMsg mass;
        //  6-vector of mass terms used in the admittance calculation
        public Std.Float64MultiArrayMsg damping;
        //  6-vector of damping terms used in the admittance calculation
        public Std.Float64MultiArrayMsg stiffness;
        //  6-vector of stiffness terms used in the admittance calculation
        //  Frame information
        public Geometry.QuaternionMsg rot_base_control;
        //  quaternion describing the orientation of the control frame
        public Geometry.TransformStampedMsg ref_trans_base_ft;
        //  force torque sensor transform at the reference joint configuration
        public Std.Int8MultiArrayMsg selected_axes;
        //  6-vector of 0/1 describing if admittance is enable in the corresponding control frame axis
        public Std.StringMsg ft_sensor_frame;
        //  name of the force torque frame
        //  State information
        public Geometry.TransformStampedMsg admittance_position;
        //  calculated admittance position in cartesian space
        public Geometry.TwistStampedMsg admittance_acceleration;
        //  calculated admittance acceleration in cartesian space
        public Geometry.TwistStampedMsg admittance_velocity;
        //  calculated admittance velocity in cartesian space
        public Geometry.WrenchStampedMsg wrench_base;
        //  wrench used in the admittance calculation
        public Sensor.JointStateMsg joint_state;
        //  calculated admittance offsets in joint space

        public AdmittanceControllerStateMsg()
        {
            this.mass = new Std.Float64MultiArrayMsg();
            this.damping = new Std.Float64MultiArrayMsg();
            this.stiffness = new Std.Float64MultiArrayMsg();
            this.rot_base_control = new Geometry.QuaternionMsg();
            this.ref_trans_base_ft = new Geometry.TransformStampedMsg();
            this.selected_axes = new Std.Int8MultiArrayMsg();
            this.ft_sensor_frame = new Std.StringMsg();
            this.admittance_position = new Geometry.TransformStampedMsg();
            this.admittance_acceleration = new Geometry.TwistStampedMsg();
            this.admittance_velocity = new Geometry.TwistStampedMsg();
            this.wrench_base = new Geometry.WrenchStampedMsg();
            this.joint_state = new Sensor.JointStateMsg();
        }

        public AdmittanceControllerStateMsg(Std.Float64MultiArrayMsg mass, Std.Float64MultiArrayMsg damping, Std.Float64MultiArrayMsg stiffness, Geometry.QuaternionMsg rot_base_control, Geometry.TransformStampedMsg ref_trans_base_ft, Std.Int8MultiArrayMsg selected_axes, Std.StringMsg ft_sensor_frame, Geometry.TransformStampedMsg admittance_position, Geometry.TwistStampedMsg admittance_acceleration, Geometry.TwistStampedMsg admittance_velocity, Geometry.WrenchStampedMsg wrench_base, Sensor.JointStateMsg joint_state)
        {
            this.mass = mass;
            this.damping = damping;
            this.stiffness = stiffness;
            this.rot_base_control = rot_base_control;
            this.ref_trans_base_ft = ref_trans_base_ft;
            this.selected_axes = selected_axes;
            this.ft_sensor_frame = ft_sensor_frame;
            this.admittance_position = admittance_position;
            this.admittance_acceleration = admittance_acceleration;
            this.admittance_velocity = admittance_velocity;
            this.wrench_base = wrench_base;
            this.joint_state = joint_state;
        }

        public static AdmittanceControllerStateMsg Deserialize(MessageDeserializer deserializer) => new AdmittanceControllerStateMsg(deserializer);

        private AdmittanceControllerStateMsg(MessageDeserializer deserializer)
        {
            this.mass = Std.Float64MultiArrayMsg.Deserialize(deserializer);
            this.damping = Std.Float64MultiArrayMsg.Deserialize(deserializer);
            this.stiffness = Std.Float64MultiArrayMsg.Deserialize(deserializer);
            this.rot_base_control = Geometry.QuaternionMsg.Deserialize(deserializer);
            this.ref_trans_base_ft = Geometry.TransformStampedMsg.Deserialize(deserializer);
            this.selected_axes = Std.Int8MultiArrayMsg.Deserialize(deserializer);
            this.ft_sensor_frame = Std.StringMsg.Deserialize(deserializer);
            this.admittance_position = Geometry.TransformStampedMsg.Deserialize(deserializer);
            this.admittance_acceleration = Geometry.TwistStampedMsg.Deserialize(deserializer);
            this.admittance_velocity = Geometry.TwistStampedMsg.Deserialize(deserializer);
            this.wrench_base = Geometry.WrenchStampedMsg.Deserialize(deserializer);
            this.joint_state = Sensor.JointStateMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.mass);
            serializer.Write(this.damping);
            serializer.Write(this.stiffness);
            serializer.Write(this.rot_base_control);
            serializer.Write(this.ref_trans_base_ft);
            serializer.Write(this.selected_axes);
            serializer.Write(this.ft_sensor_frame);
            serializer.Write(this.admittance_position);
            serializer.Write(this.admittance_acceleration);
            serializer.Write(this.admittance_velocity);
            serializer.Write(this.wrench_base);
            serializer.Write(this.joint_state);
        }

        public override string ToString()
        {
            return "AdmittanceControllerStateMsg: " +
            "\nmass: " + mass.ToString() +
            "\ndamping: " + damping.ToString() +
            "\nstiffness: " + stiffness.ToString() +
            "\nrot_base_control: " + rot_base_control.ToString() +
            "\nref_trans_base_ft: " + ref_trans_base_ft.ToString() +
            "\nselected_axes: " + selected_axes.ToString() +
            "\nft_sensor_frame: " + ft_sensor_frame.ToString() +
            "\nadmittance_position: " + admittance_position.ToString() +
            "\nadmittance_acceleration: " + admittance_acceleration.ToString() +
            "\nadmittance_velocity: " + admittance_velocity.ToString() +
            "\nwrench_base: " + wrench_base.ToString() +
            "\njoint_state: " + joint_state.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
