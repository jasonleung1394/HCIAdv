//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Control
{
    [Serializable]
    public class SteeringControllerStatusMsg : Message
    {
        public const string k_RosMessageName = "control_msgs/SteeringControllerStatus";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public double[] traction_wheels_position;
        //  positions of traction wheels if the robot is controlled by position
        public double[] traction_wheels_velocity;
        //  velocities of traction wheels if the robot is controlled by velocity
        public double[] steer_positions;
        //  positions of steering joints
        public double[] linear_velocity_command;
        //  value commanded to tractions joint
        public double[] steering_angle_command;
        //  values commanded to steering joints

        public SteeringControllerStatusMsg()
        {
            this.header = new Std.HeaderMsg();
            this.traction_wheels_position = new double[0];
            this.traction_wheels_velocity = new double[0];
            this.steer_positions = new double[0];
            this.linear_velocity_command = new double[0];
            this.steering_angle_command = new double[0];
        }

        public SteeringControllerStatusMsg(Std.HeaderMsg header, double[] traction_wheels_position, double[] traction_wheels_velocity, double[] steer_positions, double[] linear_velocity_command, double[] steering_angle_command)
        {
            this.header = header;
            this.traction_wheels_position = traction_wheels_position;
            this.traction_wheels_velocity = traction_wheels_velocity;
            this.steer_positions = steer_positions;
            this.linear_velocity_command = linear_velocity_command;
            this.steering_angle_command = steering_angle_command;
        }

        public static SteeringControllerStatusMsg Deserialize(MessageDeserializer deserializer) => new SteeringControllerStatusMsg(deserializer);

        private SteeringControllerStatusMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.traction_wheels_position, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.traction_wheels_velocity, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.steer_positions, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.linear_velocity_command, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.steering_angle_command, sizeof(double), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.WriteLength(this.traction_wheels_position);
            serializer.Write(this.traction_wheels_position);
            serializer.WriteLength(this.traction_wheels_velocity);
            serializer.Write(this.traction_wheels_velocity);
            serializer.WriteLength(this.steer_positions);
            serializer.Write(this.steer_positions);
            serializer.WriteLength(this.linear_velocity_command);
            serializer.Write(this.linear_velocity_command);
            serializer.WriteLength(this.steering_angle_command);
            serializer.Write(this.steering_angle_command);
        }

        public override string ToString()
        {
            return "SteeringControllerStatusMsg: " +
            "\nheader: " + header.ToString() +
            "\ntraction_wheels_position: " + System.String.Join(", ", traction_wheels_position.ToList()) +
            "\ntraction_wheels_velocity: " + System.String.Join(", ", traction_wheels_velocity.ToList()) +
            "\nsteer_positions: " + System.String.Join(", ", steer_positions.ToList()) +
            "\nlinear_velocity_command: " + System.String.Join(", ", linear_velocity_command.ToList()) +
            "\nsteering_angle_command: " + System.String.Join(", ", steering_angle_command.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
